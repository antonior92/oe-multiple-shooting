from __future__ import division, print_function, absolute_import
import numpy as np
from simident.narx import FeedforwardNetwork
from simident import narx
from simident.neuralnetwork import (Logistic, HyperbolicTangent, Identity)
from numpy.testing import (TestCase, assert_array_almost_equal,
                           assert_array_equal, assert_array_less,
                           assert_raises, assert_equal, assert_,
                           run_module_suite, assert_allclose, assert_warns,
                           dec)


# Auxiliar Initializer
class OnesInitializerForTest(object):

    def __call__(self, net):

        weights = []
        bias = []
        for i in range(net.nlayers):
            wshape = net.weights_shape[i]
            bshape = net.bias_shape[i]
            w = np.ones(wshape)
            b = np.zeros(bshape)

            weights += [w]
            bias += [b]

        return weights, bias


class TestFeedforwardNetworkInit(TestCase):

    def test_ninputs_noutputs_computation(self):

        mdl = FeedforwardNetwork(N=2, M=2, nhidden=[2, 3])

        assert_equal(mdl.net.ninput, 4)
        assert_equal(mdl.net.noutput, 1)

        mdl = FeedforwardNetwork(N=2, M=11, delay=10, nhidden=[2, 3])

        assert_equal(mdl.net.ninput, 4)
        assert_equal(mdl.net.noutput, 1)

        activ_func = [Logistic(),
                      HyperbolicTangent(),
                      Logistic()]
        mdl = FeedforwardNetwork(N=2, Ny=2, M=3, Nu=2, delay=2, nhidden=[2, 3],
                                 activ_func=activ_func)

        assert_equal(mdl.net.ninput, 8)
        assert_equal(mdl.net.noutput, 2)


class TestFeedforwardNetworkCall(TestCase):

    def test_ynext_siso(self):
        mdl = FeedforwardNetwork(N=2, M=2, nhidden=[2, 3])
        y = [1, 2]
        u = [2, 3]
        for i in range(10):
            params = np.random.normal(size=(mdl.Nparams,))
            ynext = mdl(y=y, u=u, params=params)
            ynext_expected = mdl.net([1, 2, 2, 3], params)
            assert_array_almost_equal(ynext, ynext_expected)

    def test_ynext_siso_delay(self):
        mdl = FeedforwardNetwork(N=2, M=11, delay=10, nhidden=[2, 3])
        y = [1, 2]
        u = [2, 3]
        for i in range(10):
            params = np.random.normal(size=(mdl.Nparams,))
            ynext = mdl(y=y, u=u, params=params)
            ynext_expected = mdl.net([1, 2, 2, 3], params)
            assert_array_almost_equal(ynext, ynext_expected)

    def test_ynext_tito(self):
        mdl = FeedforwardNetwork(N=2, M=2, Ny=2, Nu=2, nhidden=[2, 3])
        y = [[1, 2], [2, 3]]
        u = [[5, 6], [3, 2]]
        for i in range(10):
            params = np.random.normal(size=(mdl.Nparams,))
            ynext = mdl(y=y, u=u, params=params)
            ynext_expected = mdl.net([1, 2, 2, 3, 5, 6, 3, 2], params)
            assert_array_almost_equal(ynext, ynext_expected)

    def test_ynext_ar_model(self):
        mdl = FeedforwardNetwork(N=3, M=0, Ny=1, Nu=0, nhidden=[2, 3])
        y = [1, 2, 3]
        u = []
        for i in range(10):
            params = np.random.normal(size=(mdl.Nparams,))
            ynext = mdl(y=y, u=u, params=params)
            ynext_expected = mdl.net([1, 2, 3], params)
            assert_array_almost_equal(ynext, ynext_expected)

    def test_ynext_fir_model(self):
        mdl = FeedforwardNetwork(N=0, M=2, Ny=1, Nu=1, nhidden=[2, 3])
        y = []
        u = [2, 1]
        for i in range(10):
            params = np.random.normal(size=(mdl.Nparams,))
            ynext = mdl(y=y, u=u, params=params)
            ynext_expected = mdl.net([2, 1], params)
            assert_array_almost_equal(ynext, ynext_expected)


class TestFeedforwardNetworkDerivatives(TestCase):

    def test_ynext_siso(self):
        mdl = FeedforwardNetwork(N=2, M=2, nhidden=[2, 3])
        y = [1, 2]
        u = [2, 3]
        for i in range(10):
            params = np.random.normal(size=(mdl.Nparams,))
            dy, du, dparams = mdl.derivatives(y, u, params)

            dy_numeric, du_numeric, \
                dparams_numeric = mdl._numeric_derivatives(y, u, params)

            assert_array_almost_equal(dy, dy_numeric)
            assert_array_almost_equal(du, du_numeric)
            assert_array_almost_equal(dparams, dparams_numeric)

    def test_ynext_tito(self):
        mdl = FeedforwardNetwork(N=2, M=2, Ny=2, Nu=2, nhidden=[2, 3])
        y = [[1, 2], [2, 3]]
        u = [[5, 6], [3, 2]]
        for i in range(5):
            params = np.random.normal(size=(mdl.Nparams,))
            dy, du, dparams = mdl.derivatives(y, u, params)

            dy_numeric, du_numeric, \
                dparams_numeric = mdl._numeric_derivatives(y, u, params)

            assert_array_almost_equal(dy, dy_numeric)
            assert_array_almost_equal(du, du_numeric)
            assert_array_almost_equal(dparams, dparams_numeric)

    def test_ynext_ar_model(self):
        mdl = FeedforwardNetwork(N=3, M=0, Ny=1, Nu=0, nhidden=[2, 3])
        y = [1, 2, 3]
        u = []
        for i in range(5):
            params = np.random.normal(size=(mdl.Nparams,))
            dy, du, dparams = mdl.derivatives(y, u, params)

            dy_numeric, du_numeric, \
                dparams_numeric = mdl._numeric_derivatives(y, u, params)

            assert_array_almost_equal(dy, dy_numeric)
            assert_array_almost_equal(du, du_numeric)
            assert_array_almost_equal(dparams, dparams_numeric)

    def test_ynext_fir_model(self):
        mdl = FeedforwardNetwork(N=0, M=2, Ny=1, Nu=1, nhidden=[2, 3])
        y = []
        u = [2, 1]
        for i in range(5):
            params = np.random.normal(size=(mdl.Nparams,))
            dy, du, dparams = mdl.derivatives(y, u, params)

            dy_numeric, du_numeric, \
                dparams_numeric = mdl._numeric_derivatives(y, u, params)

            assert_array_almost_equal(dy, dy_numeric)
            assert_array_almost_equal(du, du_numeric)
            assert_array_almost_equal(dparams, dparams_numeric)


class TestParamsRandomGuess(TestCase):

    def test_unit_bounds_lecuninitializer(self):

        nexp = 1000

        mdl = FeedforwardNetwork(N=2, M=2, Ny=2, Nu=3, nhidden=[2, 3])

        ybounds = [[-1, 1], [-1, 1]]
        ubounds = [[-1, 1], [-1, 1], [-1, 1]]

        mean_per_layer = np.zeros(mdl.net.nlayers)
        variance_per_layer = np.zeros(mdl.net.nlayers)
        for i in range(nexp):

            np.random.seed(i*10)
            params = mdl.params_random_guess(ybounds, ubounds)

            weights, bias = mdl.net.disassemble_params(params)

            for j in range(mdl.net.nlayers):
                w = weights[j]
                we = w.shape[0]*w.shape[1]
                mean_per_layer[j] += 1/(nexp*we)*np.sum(w)
                variance_per_layer[j] += 1/(nexp*we)*np.sum(w**2)

        std_per_layer = np.sqrt(variance_per_layer)

        assert_array_almost_equal(std_per_layer, [1/np.sqrt(10),
                                                  1/np.sqrt(2),
                                                  1/np.sqrt(3)], decimal=2)
        assert_array_almost_equal(mean_per_layer, [0, 0, 0], decimal=2)

    def test_complicated_bounds_scale(self):

        mdl = FeedforwardNetwork(N=2, M=2, Ny=2, Nu=3, nhidden=[2, 3])

        ybounds = np.array([[-10, -1], [-3, 4]])
        ubounds = np.array([[1, 2], [100, 1000], [-5, 5]])

        params = mdl.params_random_guess(ybounds, ubounds,
                                         OnesInitializerForTest())

        weights, bias = mdl.net.disassemble_params(params)

        W0 = weights[0]
        b0 = bias[0].flatten()
        Wend = weights[2]
        bend = bias[2].flatten()

        assert_array_almost_equal(W0.dot([-1, 4, -1,
                                          4, 2, 1000,
                                          5, 2, 1000, 5]) +
                                  b0, [10, 10])
        assert_array_almost_equal(W0.dot([-10, -3, -10,
                                          -3, 1, 100,
                                          -5, 1, 100, -5]) +
                                  b0, [-10, -10])
        assert_array_almost_equal(weights[1], [[1, 1],
                                               [1, 1],
                                               [1, 1]])
        assert_array_almost_equal(Wend.dot([1, 0, 0])+bend, ybounds[:, 1])
        assert_array_almost_equal(Wend.dot([0, 1, 0])+bend, ybounds[:, 1])
        assert_array_almost_equal(Wend.dot([0, 0, 1])+bend, ybounds[:, 1])
        assert_array_almost_equal(Wend.dot([-1, 0, 0])+bend, ybounds[:, 0])
        assert_array_almost_equal(Wend.dot([0, -1, 0])+bend, ybounds[:, 0])
        assert_array_almost_equal(Wend.dot([0, 0, -1])+bend, ybounds[:, 0])

    def test_raise_exception(self):

        mdl = FeedforwardNetwork(N=3, M=2, Ny=2, Nu=2, nhidden=[2, 3])

        assert_raises(ValueError,
                      mdl.params_random_guess,
                      ybounds=[[-1, 2], [2, 4], [3, 4]],
                      ubounds=[[-10, -5], [3, 4]])
        assert_raises(ValueError,
                      mdl.params_random_guess,
                      ybounds=[[-1, 2], [2, 4], [3, 4], [3, 4]],
                      ubounds=[[-10, -5], [3, 4]])
        assert_raises(ValueError,
                      mdl.params_random_guess,
                      ybounds=[[-1, 2], [2, 4], [3, 4]],
                      ubounds=[[-10, -5], [3, 4], [4, 5]])
        assert_raises(ValueError,
                      mdl.params_random_guess,
                      ybounds=[[-1, -2], [2, 4]],
                      ubounds=[[-10, -5], [3, 4]])
        assert_raises(ValueError,
                      mdl.params_random_guess,
                      ybounds=[[-1, 2], [2, 4]],
                      ubounds=[[10, -5], [3, 4]])


